🌟 Day 22: GFG160 Challenge 🌟

🚀 Problem: Find the H-Index of a researcher from citation data.

💡 Approach: Utilized a counting sort technique:
1️⃣ Count citations in a frequency array (handling citations > n by capping them).
2️⃣ Traverse from the highest index to track papers with at least i citations.
3️⃣ Return the maximum i where this condition holds.

💻 Complexity: O(n) Time | O(n) Space

🔑 Result: Efficient calculation of H-Index in linear time! ✅


// C++ Program to find H-index using Counting Sort

#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int hIndex(vector<int> &citations) {

    int n = citations.size();
    vector<int> freq(n + 1);

    // Count the frequency of citations
    for (int i = 0; i < n; i++) {
        if (citations[i] >= n)
            freq[n] += 1;
        else
            freq[citations[i]] += 1;
    }

    int idx = n;
    
    // Variable to keep track of the count of papers
    // having at least idx citations
    int s = freq[n]; 
    while (s < idx) {
        idx--;
        s += freq[idx];
    }
  
    // Return the largest index for which the count of 
    // papers with at least idx citations becomes >= idx
    return idx;
}

int main() {
    vector<int> citations = {6, 0, 3, 5, 3};
    cout << hIndex(citations) << "\n";
    return 0;
}

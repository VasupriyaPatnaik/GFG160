🌟 Day 6 of the GFG160 Challenge 🌟


🚀 Problem Solved: Majority Element II

💡 Approach Used: Implemented the efficient Boyer-Moore Voting Algorithm to identify elements appearing more than [n/3] times in the array, achieving O(n) time complexity and O(1) space complexity.

✅ Steps:

1️⃣ Maintain two candidates (ele1 and ele2) and their counts (cnt1 and cnt2).
2️⃣ Iterate through the array to select potential majority candidates using dynamic count adjustments.
3️⃣ Verify the frequency of the candidates in a second pass to confirm they meet the [n/3] condition.

💻 Complexity:

Time Complexity: O(n) – Single pass for candidate selection and another pass for validation.
Space Complexity: O(1) – No additional space used apart from a few variables.

🎯 Effectiveness:

Optimal Time & Space: The Boyer-Moore algorithm efficiently tracks at most two candidates without additional memory overhead.
Insightful Logic: Dynamically adjusts candidate counts to narrow down to valid majority elements.

🎯 Key Takeaway:
The Boyer-Moore Voting Algorithm efficiently identifies elements appearing more than ⌊n/3⌋ times by dynamically adjusting counts for at most two candidates. 
This approach minimizes unnecessary computations and avoids extra space usage, making it an excellent choice for majority element problems.


// C++ program for finding the majority element in an array
// using Moore’s Voting algorithm

#include <iostream>
#include <vector>
#include <algorithm>
#include <limits.h>
using namespace std;

// Function to find Majority element in an array
vector<int> findMajority(vector<int> &arr) {
    int n = arr.size();

    // Initialize two candidates and their counts
    int ele1 = -1, ele2 = -1, cnt1 = 0, cnt2 = 0;

    for (int ele : arr) {
      
        // Increment count for candidate 1
        if (ele1 == ele) {
            cnt1++;
        }
      
        // Increment count for candidate 2
        else if (ele2 == ele) {
            cnt2++;
        }
      
        // New candidate 1 if count is zero
        else if (cnt1 == 0) {
            ele1 = ele;
            cnt1++;
        }
      
        // New candidate 2 if count is zero
        else if (cnt2 == 0) {
            ele2 = ele;
            cnt2++;
        }
      
        // Decrease counts if neither candidate
        else {
            cnt1--;
            cnt2--;
        }
    }

    vector<int> res;
    cnt1 = 0;
    cnt2 = 0;

    // Count the occurrences of candidates
    for (int ele : arr) {
        if (ele1 == ele) cnt1++;
        if (ele2 == ele) cnt2++;
    }

    // Add to result if they are majority elements
    if (cnt1 > n / 3) res.push_back(ele1);
    if (cnt2 > n / 3 && ele1 != ele2) res.push_back(ele2);
    
    if(res.size() == 2 && res[0] > res[1])
        swap(res[0], res[1]);
    return res;
}

int main() {
  
    vector<int> arr = {2, 2, 3, 1, 3, 2, 1, 1};
    vector<int> res = findMajority(arr);
    for (int ele : res) {
        cout << ele << " ";
    }
    return 0;
}

🌟 Day 14: GFG160 Challenge 🌟

🚀 Problem: Implement Atoi

💡 Approach: Designed a solution to convert a string into an integer without using built-in functions. The algorithm handles edge cases like whitespaces, signs, leading zeros, and out-of-bound values.

📌 Steps to Solve:
1️⃣ Skip leading whitespaces in the string.
2️⃣ Check for a sign (‘+’ or ‘-’) and track it. Default to positive if absent.
3️⃣ Read digits to form the integer until encountering a non-digit character.
4️⃣ Handle overflow: Return 2^31 − 1 for exceeding positive bounds and −2^31 for negative.

💻 Complexity:
⏱ Time: O(n) – Single traversal of the string.
📦 Space: O(1) – No additional memory usage.

✅ Key Takeaway:
Efficient handling of edge cases ensures robust string-to-integer conversion, meeting constraints seamlessly.


// C++ Program to implement atoi() function

#include <iostream>
#include <limits.h>
using namespace std;

int myAtoi(char* s) {
    int sign = 1, res = 0, idx = 0;

    // Ignore leading whitespaces
    while (s[idx] == ' ') {
        idx++;
    }

    // Store the sign of number
    if (s[idx] == '-' || s[idx] == '+') {
          if(s[idx++] == '-')
          sign = -1;
    }

    // Construct the number digit by digit
    while (s[idx] >= '0' && s[idx] <= '9') {
        
        // handling overflow/underflow test case
        if (res > INT_MAX / 10 || (res == INT_MAX / 10 && s[idx] - '0' > 7)) {
            return sign == 1 ? INT_MAX : INT_MIN;
        }
      
        // Append current digit to the result
        res = 10 * res + (s[idx++] - '0');
    }
    return res * sign;
}

int main() {
    char s[] = "  -0012g4";
    cout << myAtoi(s);
    return 0;
}

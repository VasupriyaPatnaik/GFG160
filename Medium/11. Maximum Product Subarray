🌟 Day 11 of the GFG160 Challenge 🌟

🚀 Problem Solved: Maximum Product Subarray

💡 Approach Used: We implemented a dual-direction traversal to handle both zero and negative numbers, ensuring the maximum product is calculated accurately.

✅ Steps:
1️⃣ Traverse the array from the start while maintaining a running product. Reset to 1 on encountering zero and update the maximum product encountered so far.
2️⃣ Repeat the process from the end to handle cases with an odd number of negative elements by rejecting the first negative element.
3️⃣ Return the maximum product found across both traversals.

🎯 Key Takeaway:

Dual-Direction Traversal: Effectively manages zero and odd negatives.
Optimal Solution: Achieves O(n) time and O(1) space, making it both scalable and efficient.

💻 Complexity:

Time Complexity: O(n) – Single pass from both directions.
Space Complexity: O(1) – No extra space used.


// C++ program to find Maximum Product Subarray using 
// Traversal From Starting and End of an Array

#include <bits/stdc++.h>
using namespace std;

// function to find the product of max product subarray.
int maxProduct(vector<int> &arr) {
      int n = arr.size();
    int maxProd = INT_MIN;
  
    // leftToRight to store product from left to Right
    int leftToRight = 1;
  
    // rightToLeft to store product from right to left
    int rightToLeft = 1;
  
    for (int i = 0; i < n; i++) {
        if (leftToRight == 0)
            leftToRight = 1;
        if (rightToLeft == 0)
            rightToLeft = 1;
      
        // calculate product from index left to right
        leftToRight *= arr[i];
      
        // calculate product from index right to left
        int j = n - i - 1;
        rightToLeft *= arr[j];
        maxProd = max({leftToRight, rightToLeft, maxProd});
    }
    return maxProd;
}

int main() {
    vector<int> arr = { -2, 6, -3, -10, 0, 2 };
    cout << maxProduct(arr);
    return 0;
}

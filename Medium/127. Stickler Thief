🌟 Day 127: GFG160 Challenge 🌟

🔗 Problem: Stickler Thief

💡 Approach: Bottom-Up DP (Tabulation)
1️⃣ Use dp[i] to track max loot from first i houses.
2️⃣ Transition: dp[i] = max(arr[i] + dp[i-2], dp[i-1]).
3️⃣ Return dp[n] as the maximum loot. 🚀

#include <bits/stdc++.h>
using namespace std;

// Function to calculate the maximum stolen value using bottom-up DP
int findMaxSum(vector<int>& arr) {
    int n = arr.size();
  
    // Create a dp array to store the maximum loot at each house
    vector<int> dp(n+1, 0);

    // Base cases
    dp[0] = 0;
    dp[1] = arr[0];

    // Fill the dp array using the bottom-up approach
    for (int i = 2; i <= n; i++) 
        dp[i] = max(arr[i - 1] + dp[i - 2], dp[i - 1]);

    return dp[n];
}

int main() {
    vector<int> arr = {6, 5, 5, 7, 4};
    cout << findMaxSum(arr) << endl;
    return 0;
}

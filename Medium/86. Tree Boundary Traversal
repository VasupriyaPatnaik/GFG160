🌟 Day 86: GFG160 Challenge 🌟
🔗 Problem: Tree Boundary Traversal

💡 Approach: Recursion
1️⃣ Left Boundary: Traverse left, excluding leaf nodes.
2️⃣ Leaf Nodes: Collect all leaves in left-to-right order.
3️⃣ Reverse Right Boundary: Traverse right in reverse order, excluding leaf nodes.

✅ Combined traversal gives the tree boundary efficiently! 🚀

//Driver Code Starts{
// C++ implementation for Boundary 
// Traversal of Binary Tree using recursion
#include <iostream>
#include <vector>
using namespace std;

class Node {
  public:
    int data;
    Node *left;
    Node *right;

    Node(int x) {
        data = x;
        left = right = nullptr;
    }
};
//Driver Code Ends }


bool isLeaf(Node *node) {
    return node->left == nullptr && node->right == nullptr;
}

// Function to collect left boundary nodes
// (top-down order)
void collectBoundaryLeft(Node* root, vector<int>& res) {
      // exclude leaf node
    if (root == nullptr || isLeaf(root))
        return;
    
      res.push_back(root->data);
    if (root->left) 
        collectBoundaryLeft(root->left, res);
    
    else if (root->right)
        collectBoundaryLeft(root->right, res);
}

// Function to collect all leaf nodes 
void collectLeaves(Node *root, vector<int> &res) {
    if (root == nullptr)
        return;
    
      // Add leaf nodes
    if (isLeaf(root)) {
        res.push_back(root->data);
        return;
    }

    collectLeaves(root->left, res);
    collectLeaves(root->right, res);
}


// Function to collect right boundary nodes
// (bottom-up order)
void collectBoundaryRight(Node* root, vector<int>& res) {
      // exclude leaf nodes
    if (root == nullptr || isLeaf(root)) 
        return;

    if (root->right)
        collectBoundaryRight(root->right, res);

    else if (root->left) 
        collectBoundaryRight(root->left, res);
    
    res.push_back(root->data);  
}

// Function to find Boundary Traversal of Binary Tree
vector<int> boundaryTraversal(Node *root) {
    vector<int> res;

    if (!root)
        return res;

    // Add root data if it's not a leaf
    if (!isLeaf(root))
        res.push_back(root->data);

    // Collect left boundary
    collectBoundaryLeft(root->left, res);

    // Collect leaf nodes
    collectLeaves(root, res);

    // Collect right boundary
    collectBoundaryRight(root->right, res);

    return res;
}


//Driver Code Starts{
int main() {

    // Hardcoded Binary tree
    //        20
    //       /  \
    //      8    22
    //     / \     \
    //    4   12    25
    //       /  \
    //      10   14
    Node *root = new Node(20);
    root->left = new Node(8);
    root->right = new Node(22);
    root->left->left = new Node(4);
    root->left->right = new Node(12);
    root->left->right->left = new Node(10);
    root->left->right->right = new Node(14);
    root->right->right = new Node(25);

    vector<int> boundary = boundaryTraversal(root);

    for (int x : boundary)
        cout << x << " ";

    return 0;
}

//Driver Code Ends }

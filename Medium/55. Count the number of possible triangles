🌟 Day 55: GFG160 Challenge 🌟

🔗 Problem: Count the Number of Possible Triangles

💡 Approach:
1️⃣ Sort the array to simplify checking the triangle inequality.
2️⃣ Use Two Pointers: Fix the largest side at arr[i], initialize left at 0 and right at i-1.
3️⃣ If arr[left] + arr[right] > arr[i], count all pairs between left and right, then move right leftward.
4️⃣ Else, move left forward to increase the sum.

⏳ Complexity:
Time: 
O(n^2)
Space: O(1)

✅ Result: Efficiently counted all valid triangle triplets! 🎯


// C++ code to count the number of possible triangles
// using Two Pointers Technique

#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

// Function to count the number of valid triangles.
int countTriangles(vector<int> &arr) {
    int res = 0;
    sort(arr.begin(), arr.end());

    // Iterate through the array, fixing the largest side at arr[i]
    for (int i = 2; i < arr.size(); ++i) {
      
          // Initialize pointers for the two smaller sides
        int left = 0, right = i - 1; 

        while (left < right) {
          
            if (arr[left] + arr[right] > arr[i]) {
              
                // arr[left] + arr[right] satisfies the triangle inequality,
                // so all pairs (x, right) with (left <= x < right) are valid
                res += right - left; 
              
                  // Move the right pointer to check smaller pairs
                right--; 
            } 
              else {
              
                  // Move the left pointer to increase the sum
                left++; 
            }
        }
    }

    return res;
}

int main() {
    vector<int> arr = {4, 6, 3, 7};
    cout << countTriangles(arr);
    return 0;
}

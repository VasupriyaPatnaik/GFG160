🌟 Day 36: GFG160 Challenge 🌟

🚀 Problem: Spirally Traversing a Matrix
Given a matrix mat[][], traverse it in spiral order and return the elements in an array.

💡 Approach:
1️⃣ Use Boundary Traversal with variables top, bottom, left, and right:
      - Traverse the top row (left → right) and increment top.
      - Traverse the right column (top → bottom) and decrement right.
      - If boundaries haven’t crossed:
            - Traverse the bottom row (right → left) and decrement bottom.
            - Traverse the left column (bottom → top) and increment left.
2️⃣ Repeat until all elements are visited.

⏳ Complexity:
Time: O(m * n) (visiting each element once).
Space: O(1) (output array not considered).

🔑 Result: Successfully spiraled through the matrix! 🌀


// C++ program to perform spiral order
// traversal of a matrix
#include <iostream>
#include <vector>
using namespace std;

vector<int> spirallyTraverse(vector<vector<int>> &mat) {
    int m = mat.size();
    int n = mat[0].size();

    // Vector to store the spiral order elements
    vector<int> res;

    // Initialize boundaries
    int top = 0, bottom = m - 1, left = 0, right = n - 1;

    // Iterate until all elements are printed
    while (top <= bottom && left <= right) {

        // Print top row from left to right
        for (int i = left; i <= right; ++i) {
            res.push_back(mat[top][i]);
        }
        top++;

        // Print right column from top to bottom
        for (int i = top; i <= bottom; ++i) {
            res.push_back(mat[i][right]);
        }
        right--;

        // Print bottom row from right to left (if exists)
        if (top <= bottom) {
            for (int i = right; i >= left; --i) {
                res.push_back(mat[bottom][i]);
            }
            bottom--;
        }

        // Print left column from bottom to top (if exists)
        if (left <= right) {
            for (int i = bottom; i >= top; --i) {
                res.push_back(mat[i][left]);
            }
            left++;
        }
    }

    return res;
}

int main() {

    vector<vector<int>> mat = {{1, 2, 3, 4}, 
                               {5, 6, 7, 8}, 
                               {9, 10, 11, 12}, 
                               {13, 14, 15, 16}};

    vector<int> res = spirallyTraverse(mat);
    for (int ele : res)
        cout << ele << " ";
    return 0;
}

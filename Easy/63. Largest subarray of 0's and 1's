🌟 Day 63: GFG160 Challenge 🌟

🔗 Problem: Largest Subarray of 0s and 1s

💡 Approach:
1️⃣ Convert 0s to -1s to transform the problem into Longest Subarray with Sum 0.
2️⃣ Use Prefix Sum and Hash Map to track first occurrences of sums.
3️⃣ If prefixSum == 0, update the longest subarray length from index 0.
4️⃣ If prefixSum is already in the map, update the maximum subarray length.

⏳ Complexity:
🔹 Time: O(n)
🔹 Space: O(n)

✅ Efficiently finds the longest subarray with equal 0s and 1s! 🎯


// C++ program to find longest subarray with equal 
// number of 0's and 1's Using Hashmap and Prefix Sum

#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

int maxLen(vector<int> &arr) {
    unordered_map<int, int> mp;

    int preSum = 0; 
    int res = 0; 
  
    // Traverse through the given array
    for (int i = 0; i < arr.size(); i++) {
      
        // Add current element to sum
          // if current element is zero, add -1
        preSum += (arr[i] == 0) ? -1 : 1;

        // To handle sum = 0 at last index
        if (preSum == 0) 
            res = i + 1;

        // If this sum is seen before, then update 
          // result with maximum
        if (mp.find(preSum) != mp.end())
            res = max(res, i - mp[preSum]);
        
        // Else put this sum in hash table
        else 
            mp[preSum] = i;
    }

    return res;
}

int main() {
    vector<int> arr = {1, 0, 0, 1, 0, 1, 1};
  
    cout << maxLen(arr) << endl;
    return 0;
}

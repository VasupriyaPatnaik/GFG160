🌟 Day 58: GFG160 Challenge 🌟

🔗 Problem: Longest Substring with Distinct Characters

💡 Approach:
1️⃣ Use Sliding Window to track distinct characters.
2️⃣ Expand the window while characters are unique.
3️⃣ On repetition, shrink the window from the left until uniqueness is restored.
4️⃣ Keep track of the maximum window length.

⏳ Complexity:
Time: O(n)
Space: O(1)

✅ Result: Efficiently found the longest distinct substring length! 🎯


// C++ code to find the largest substring with non-repeating
// characters using Sliding Window

#include <iostream>
#include <vector>
using namespace std;

const int MAX_CHAR = 26;

int longestUniqueSubstr(string& s) {
    if (s.length() == 0 || s.length() == 1)
        return s.length();

    int res = 0;
    vector<bool>vis(MAX_CHAR, false);

    // left and right pointer of sliding window
    int left = 0, right = 0;
    while (right < s.length()) {

        // If character is repeated, move left pointer marking
          // visited characters as false until the repeating 
          // character is no longer part of the current window
        while (vis[s[right] - 'a'] == true) {

                vis[s[left] - 'a'] = false;
                left++;
           }

        vis[s[right] - 'a'] = true;

        // The length of the current window (right - left + 1)
        // is calculated and answer is updated accordingly.
        res = max(res, (right - left + 1));
        right++;
    }
    return res;
}

int main() {
    string s = "geeksforgeeks";
    cout << longestUniqueSubstr(s);
    return 0;
}

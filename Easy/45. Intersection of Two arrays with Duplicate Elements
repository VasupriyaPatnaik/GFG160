🌟 Day 45: GFG160 Challenge 🌟
🚀 Problem: Intersection of Two Arrays with Duplicate Elements

💡 Approach:
1️⃣ Create a Hash Set as to store unique elements of array a[].
2️⃣ Use another Hash Set rs to track elements in the result.
3️⃣ Traverse array b[]:

If an element exists in as but not in rs, add it to the result and rs.
4️⃣ Return the result array.
⏳ Complexity:

Time: 
𝑂
(
𝑛
+
𝑚
)
O(n+m), where 
𝑛
n and 
𝑚
m are the sizes of arrays 
𝑎
[
]
a[] and 
𝑏
[
]
b[].
Space: 
𝑂
(
𝑛
)
O(n).
🔑 Result: Successfully found the intersection of two arrays with unique elements! 🏆


#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

vector<int> intersection(vector<int>& a, vector<int>& b) {
  
    // Put all elements of a[] in as
    unordered_set<int> as(a.begin(), a.end());  
  
    unordered_set<int> rs;                    
    vector<int> res;                            

    // Traverse through b[]
    for (int i = 0; i < b.size(); i++) {
      
        // If the element is in as and not yet in rs
        // a) Add it to the result set
        // b) Add it to the result array
        if (as.find(b[i]) != as.end() && 
            rs.find(b[i]) == rs.end()) {
            rs.insert(b[i]); 
            res.push_back(b[i]); 
        }
    }

    return res;
}

int main() {
    vector<int> a = {1, 2, 3, 2, 1};
    vector<int> b = {3, 2, 2, 3, 3, 2};

    vector<int> res = intersection(a, b);
  
    for (int i = 0; i < res.size(); i++) 
        cout << res[i] << " ";

    return 0;
}

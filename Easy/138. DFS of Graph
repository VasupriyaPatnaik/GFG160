🌟 Day 138: GFG60 Challenge 🌟
🔗 Problem: DFS of Graph

💡 Approach: To perform a Depth First Search on a disconnected undirected graph, we ensure every node is visited by initiating DFS from each unvisited node.

📌 Steps:
1️⃣ Maintain a visited[] array to track visited nodes
2️⃣ For every vertex v, if not visited, call DFS(v)
3️⃣ DFS visits all reachable nodes from v, respecting the adjacency list order
4️⃣ Collect all visited nodes in the order they're traversed ✅

🧠 Note: This ensures all components are covered, even in disconnected graphs!

🛠️ Time Complexity: O(V + E)
📦 Space Complexity: O(V)

🔁 One recursive stack & a visited list, and we’re good to go!

#include <bits/stdc++.h>
using namespace std;

void addEdge(vector<vector<int>> &adj, int s, int t)
{
    adj[s].push_back(t);
    adj[t].push_back(s);
}

// Recursive function for DFS traversal
void dfsRec(vector<vector<int>> &adj, vector<bool> &visited, int s, vector<int> &res)
{
    // Mark the current vertex as visited
    visited[s] = true;

    res.push_back(s);

    // Recursively visit all adjacent vertices that are not visited yet
    for (int i : adj[s])
        if (visited[i] == false)
            dfsRec(adj, visited, i, res);
}

// Main DFS function to perform DFS for the entire graph
vector<int> DFS(vector<vector<int>> &adj)
{
    vector<bool> visited(adj.size(), false);
    vector<int> res;
    // Loop through all vertices to handle disconnected graph
    for (int i = 0; i < adj.size(); i++)
    {
        if (visited[i] == false)
        {
            // If vertex i has not been visited,
            // perform DFS from it
            dfsRec(adj, visited, i, res);
        }
    }

    return res;
}

int main()
{
    int V = 6;
    // Create an adjacency list for the graph
    vector<vector<int>> adj(V);

    // Define the edges of the graph
    vector<vector<int>> edges = {{1, 2}, {2, 0}, {0, 3}, {4, 5}};

    // Populate the adjacency list with edges
    for (auto &e : edges)
        addEdge(adj, e[0], e[1]);
    vector<int> res = DFS(adj);

    for (auto it : res)
        cout << it << " ";
    return 0;
}

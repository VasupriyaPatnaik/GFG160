🌟 Day 81: TUF+ Giveaway Challenge 🌟
🔗 Problem: Height of Binary Tree

💡 Approach: Recursion - O(n) Time, O(h) Space
1️⃣ If the tree is empty, return -1.
2️⃣ Recursively compute the height of left and right subtrees.
3️⃣ Height = max(left, right) + 1 for the current node.

✅ Efficiently finds the longest path from root to leaf! 🚀

//Driver Code Starts{
// C++ program to find the height of a binary 
// tree using depth-first search (DFS) approach.
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};
//Driver Code Ends }


// Returns height which is the number of edges
// along the longest path from the root node down 
// to the farthest leaf node.
int height(Node *root) {
    if (root == nullptr)
        return -1;

    // compute the height of left and right subtrees
    int lHeight = height(root->left);
    int rHeight = height(root->right);

    return max(lHeight, rHeight) + 1;
}


//Driver Code Starts{
int main() {
  
    // Representation of the input tree:
    //     12
    //    /  \
    //   8   18
    //  / \
    // 5   11
    Node *root = new Node(12);
    root->left = new Node(8);
    root->right = new Node(18);
    root->left->left = new Node(5);
    root->left->right = new Node(11);
    
    cout << height(root);
    
    return 0;
}

//Driver Code Ends }

🌟 Day 99: GFG160 Challenge 🌟

🔗 Problem: Parenthesis Checker

💡 Approach: Using Stack - O(n) Time & O(n) Space
1️⃣ Push opening brackets onto a stack.
2️⃣ On encountering a closing bracket, check if it matches the stack’s top.
3️⃣ If the stack is empty at the end, the string is balanced; otherwise, it’s not.

✅ Efficient and simple! 🚀

// C++ program to check if parentheses are balanced

#include <bits/stdc++.h>
using namespace std;

bool isBalanced(const string& s) {
  
    // Declare a stack to store the opening brackets
    stack<char> st;
    for (int i = 0; i < s.length(); i++) {
        
        // Check if the character is an opening bracket
        if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
            st.push(s[i]); 
        } 
      
        else {

            // If it's a closing bracket, check if the stack is non-empty
            // and if the top of the stack is a matching opening bracket
            if (!st.empty() && 
                ((st.top() == '(' && s[i] == ')') ||
                 (st.top() == '{' && s[i] == '}') ||
                 (st.top() == '[' && s[i] == ']'))) {

                // Pop the matching opening bracket
                st.pop(); 
            }
            else {
                
                // Unmatched closing bracket
                return false; 
            }
        }
    }
    
    // If stack is empty, return true (balanced), otherwise false
    return st.empty();
}

int main() {  
    string s = "{([])}";
    if (isBalanced(s))
        cout << "true";
    else
        cout << "false";
    return 0;
}

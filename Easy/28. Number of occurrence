🌟 Day 28: GFG160 Challenge

🧩 Problem: Number of Occurrences
Find the number of times a target appears in a sorted array.

✨ Approach: Use Binary Search to find:
1️⃣ Lower Bound: Index of the first occurrence of the target.
2️⃣ Upper Bound: Index of the first element greater than the target.
Subtract these indices to get the count.

⚡ Complexity:
Time: O(log n)
Space: O(1)

✅ Result: Efficiently counted occurrences in logarithmic time! 👏


// C++ program to count occurence of given target using binary search

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int countFreq(vector<int> &arr, int target) {
    int l = lower_bound(arr.begin(), arr.end(), target) - arr.begin();
    int r = upper_bound(arr.begin(), arr.end(), target) - arr.begin();
      
    // Return the differnce between upper
    // bound and lower bound of the target
    return r - l;
}

int main() {
    vector<int> arr = {1, 2, 2, 2, 2, 3, 4, 7, 8, 8};
    int target = 2;
    cout<< countFreq(arr, target);
    return 0;
}

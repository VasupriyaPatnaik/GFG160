🌟 Day 9 of the GFG160 Challenge 🌟

🚀 Problem Solved: Minimize the Heights II

💡 Approach Used:
Implemented an O(nlogn) time complexity and O(1) space complexity solution by sorting the heights and iteratively calculating the minimum difference between the tallest and shortest towers after adjustment.

✅ Steps:
1️⃣ Sort the Array to simplify the height adjustment process.
2️⃣ Iterate Through Heights:
       - For each index, divide the array into two parts:
       - Increase heights on the left (0 to i-1) by K.
       - Decrease heights on the right (i to n-1) by K.
 Compute the smallest and tallest heights after the adjustment.
3️⃣ Track the Minimum Difference between tallest and shortest heights across all indices.

🎯 Key Takeaways:

Optimal Logic: Sorting combined with iterative computation ensures the smallest height difference with minimal adjustments.
Scalable Solution: Efficient for large datasets with logarithmic sorting and linear traversal.

💻 Complexity:

Time Complexity: O(nlogn) – Sorting dominates the operation.
Space Complexity: O(1) – Uses constant space for variables.



// C++ program to minimize the maximum difference
// between heights using Sorting

#include <bits/stdc++.h>
using namespace std;

// Function to minimize the maximum difference
int getMinDiff(vector<int> &arr, int k) {
    int n = arr.size();
    sort(arr.begin(), arr.end());
  
    // If we increase all heights by k or decrease all
    // heights by k, the result will be arr[n - 1] - arr[0]
    int res = arr[n - 1] - arr[0];

    //  For all indices i, increment arr[0...i-1] by k and
    // decrement arr[i...n-1] by k
    for (int i = 1; i < arr.size(); i++) {
      
        // Impossible to decrement height of ith tower by k, 
        // continue to the next tower
        if (arr[i] - k < 0)
            continue;
      
        // Minimum height after modification
        int minH = min(arr[0] + k, arr[i] - k);
      
        // Maximum height after modification
        int maxH = max(arr[i - 1] + k, arr[n - 1] - k);

        // Store the minimum difference as result
        res = min(res, maxH - minH);
    }
    return res;
}

int main() {

    int k = 6;
    vector<int> arr = {12, 6, 4, 15, 17, 10};

    int ans = getMinDiff(arr, k);
    cout << ans;

    return 0;
}

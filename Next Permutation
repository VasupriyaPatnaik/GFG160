🌟 Day 5 of the GFG160 Challenge 🌟

🚀 Problem Solved: Next Permutation

💡 Approach: Implemented an efficient O(n) time complexity and O(1) space complexity algorithm to generate the next lexicographical permutation. If no such permutation exists, rearrange the array into its lowest possible order.

✅ Steps:

1️⃣ Identify the pivot – the first element (from the right) smaller than its next element.
2️⃣ Find the smallest element larger than the pivot (from the right) and swap them.
3️⃣ Reverse the portion of the array after the pivot to get the next permutation.

💻 Complexity:

Time: O(n) – One pass to find the pivot, one pass to find the next greater element, and one pass to reverse.
Space: O(1) – In-place rearrangement.

🎯 Key Takeaway: This approach is a classic example of how systematic thinking leads to optimized solutions for combinatorial problems.



// C++ Program to find the next permutation by 
// generating only next

#include <bits/stdc++.h>
using namespace std;

void nextPermutation(vector<int> &arr) {
  
    int n = arr.size(); 

     // Find the pivot index
    int pivot = -1; 
    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] < arr[i + 1]) {
            pivot = i;
            break;
        }
    }

    // If pivot point does not exist, reverse the
    // whole array
    if (pivot == -1) {
        reverse(arr.begin(), arr.end());
        return;
    }

    // find the element from the right that
    // is greater than pivot
    for (int i = n - 1; i > pivot; i--) {
        if (arr[i] > arr[pivot]) {
            swap(arr[i], arr[pivot]);
            break;
        }
    }

    // Reverse the elements from pivot + 1 to the 
    // end to get the next permutation
    reverse(arr.begin() + pivot + 1, arr.end());
}

int main()
{
    vector<int> arr = { 2, 4, 1, 7, 5, 0 };
    nextPermutation(arr);    
    for (int x : arr) 
        cout << x << " ";    
    return 0;
}

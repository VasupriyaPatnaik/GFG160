🌟 Day 8 of the GFG160 Challenge 🌟

🚀 Problem Solved: Stock Buy and Sell – Max One Transaction Allowed

💡 Approach Used:
Implemented an O(n) time complexity and O(1) space complexity solution by dynamically tracking the minimum buy price and computing the maximum profit for each day.

✅ Steps:
1️⃣ Initialize variables for the minimum buy price and the maximum profit.
2️⃣ Iterate through the prices array:
    - Update the minimum buy price encountered so far.
    - Compute the potential profit for the current day.
    - Update the maximum profit if the current profit exceeds it.
3️⃣ Return the maximum profit.

🎯 Key Takeaway:

Optimal Logic: By maintaining a dynamic minimum buy price and calculating profits incrementally, this approach ensures efficiency without redundant operations.
Scalable Solution: Handles large datasets effectively with linear time complexity and minimal space usage.

💻 Complexity:

Time Complexity: O(n) – Single traversal of the price array.
Space Complexity: O(1) – Constant space for variables.



// C++ Program to solve stock buy and sell
// using one traversal

#include <iostream>
#include <vector>
using namespace std;

int maxProfit(vector<int> &prices) {
  
    int minSoFar = prices[0], res = 0;
  
    for (int i = 1; i < prices.size(); i++) {

        // Update the minimum value seen so
        // far if we see smaller
        minSoFar = min(minSoFar, prices[i]);
       
        // Update result if we get more profit                
        res = max(res, prices[i] - minSoFar);
    }
    return res;
}

int main() {
    vector<int> prices = {7, 10, 1, 3, 6, 9, 2};
    cout << maxProfit(prices) << endl;
    return 0;
}

🌟 Day 4 of the GFG160 Challenge 🌟

🚀 Problem Solved: Rotate Array to the Left by d Steps

💡 Approach: Used the Reversal Algorithm to achieve an O(n) time complexity and O(1) space complexity. This approach efficiently rotates the array in-place while treating it as circular.

✅ Steps:

1️⃣ Reverse the first d elements.
2️⃣ Reverse the remaining n - d elements.
3️⃣ Reverse the entire array.

💻 Complexity:

Time: O(n) – Each reversal traverses the array once.
Space: O(1) – In-place operation with no extra memory.

🎯 Key Takeaway: The reversal algorithm is a clever and efficient technique for rotating arrays without additional space overhead.


// C++ Code to left rotate an array using Reversal Algorithm

#include <bits/stdc++.h>

using namespace std;

// Function to rotate an array by d elements to the left
void rotateArr(vector<int>& arr, int d) {
    int n = arr.size();
  
    // Handle the case where d > size of array
    d %= n;
  
    // Reverse the first d elements
    reverse(arr.begin(), arr.begin() + d);

    // Reverse the remaining n-d elements
    reverse(arr.begin() + d, arr.end());
  
    // Reverse the entire array
    reverse(arr.begin(), arr.end());
}

int main() {
    vector<int> arr = { 1, 2, 3, 4, 5, 6 };
    int d = 2;
    
      rotateArr(arr, d);
  
    for (int i = 0; i < arr.size(); i++) 
        cout << arr[i] << " ";
    return 0;
}

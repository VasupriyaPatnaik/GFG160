🌟 Day 12 of the GFG160 Challenge 🌟

🚀 Problem Solved: Max Circular Subarray Sum

💡 Approach Used: Kadane's Algorithm – O(n) Time, O(1) Space

✅ Steps to Solve:
1️⃣ Compute the maximum subarray sum using Kadane’s algorithm.
2️⃣ Calculate the total sum of the array.
3️⃣ Find the minimum subarray sum (invert the problem using Kadane’s).
4️⃣ The result is the maximum of the two:
   📌 Case 1: Standard maximum subarray sum.
   📌 Case 2: Total sum - minimum subarray sum (to consider circular wrapping).

🎯 Key Takeaway:
This method efficiently finds both standard and circular subarray sums, leveraging Kadane’s algorithm twice to optimize performance.

💻 Complexity:
Time: O(n) – Single traversal.
Space: O(1) – No extra space.


// C++ program to find maximum Subarray Sum in Circular
// subarray by considering all possbile subarrays

#include <iostream>
#include <vector>
using namespace std;

int circularSubarraySum(vector<int> &arr) {

    int totalSum = 0;
    int currMaxSum = 0, currMinSum = 0;
    int maxSum = arr[0], minSum = arr[0];

    for (int i = 0; i < arr.size(); i++) {

        // Kadane's to find maximum sum subarray
        currMaxSum = max(currMaxSum + arr[i], arr[i]);
        maxSum = max(maxSum, currMaxSum);

        // Kadane's to find minimum sum subarray
        currMinSum = min(currMinSum + arr[i], arr[i]);
        minSum = min(minSum, currMinSum);

        // Sum of all the elements of input array
        totalSum = totalSum + arr[i];
    }

    int normalSum = maxSum;
    int circularSum = totalSum - minSum;

    // If the minimum subarray is equal to total Sum
    // then we just need to return normalSum
    if (minSum == totalSum)
        return normalSum;

    return max(normalSum, circularSum);
}

int main() {
    vector<int> arr = {8, -8, 9, -9, 10, -11, 12};
    cout << circularSubarraySum(arr);
}

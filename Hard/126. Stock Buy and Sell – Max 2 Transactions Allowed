🌟 Day 126: GFG160 Challenge 🌟

🔗 Problem: Stock Buy and Sell – Max 2 Transactions

💡 Approach: Dynamic Programming (O(n) Time, O(1) Space)
1️⃣ Use dp[k][j] to track max profit with k transactions & buy/sell state.
2️⃣ Iterate prices in reverse, updating DP for max profit.
3️⃣ Return curr[2][1], representing max profit from day 0. 🚀

#include <bits/stdc++.h>
using namespace std;
// Function to return max profit from at most 2
// transation
int maxProfit(vector<int> &prices){
    int n = prices.size();
    if (n == 0)
        return 0;

    vector<vector<int>> curr(3, vector<int>(2, 0));
    vector<vector<int>> next(3,  vector<int>(2, 0));

    // Iterate from the last day to the first
    for (int i = n - 1; i >= 0; i--){
        for (int k = 1; k <= 2; k++){
          
            // Calculate for buy state
            curr[k][1] = max(-prices[i] +
                       next[k][0], next[k][1]);
          
            // Calculate for sell state
            curr[k][0] = max(prices[i] +
                    next[k - 1][1], next[k][0]);
        }
        
        // Move current state to next, for the
        // next iteration
        next = curr;
    }

    return curr[2][1];
}

int main() {
    vector<int> price = { 10, 22, 5, 75, 65, 80 };
    cout << maxProfit(price);
    return 0;
}
